import os
from datetime import timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# 1) –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

# 2) –¢–µ–∫—Å—Ç—ã (–º–µ–Ω—è–π –ø–æ–¥ —Å–µ–±—è)
AGE_QUESTION = "–í–∞–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç?"
AGE_REQUIRED = (
    "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π 18+. "
    "–ï—Å–ª–∏ –≤–∞–º —É–∂–µ –µ—Å—Ç—å 18, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ."
)

POST1_TEXT = (
    "üéÅ –†–û–ó–´–ì–†–´–® #1\n\n"
    "‚Äî iPhone 16 Pro Max\n"
    "‚Äî PlayStation 5\n"
    "‚Äî AirPods Max\n\n"
    "–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞ üëá"
)

POST2_TEXT = (
    "üéÅ –†–û–ó–´–ì–†–´–® #2 (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)\n\n"
    "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∫–∞–Ω–∞–ª üëá"
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å URL/–ø–æ–¥–ø–∏—Å–µ–π)
POST_BUTTONS = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/premium_party01")],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è", url="https://t.me/premium_party01")],
    ]
)

# 3) –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–æ—Å—Ç–µ ‚Äî —É–∫–∞–∂–∏ URL (–∏–ª–∏ –æ—Å—Ç–∞–≤—å None)
POST1_PHOTO_URL = None  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "https://your-cdn.com/post1.jpg"
POST2_PHOTO_URL = None  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "https://your-cdn.com/post2.jpg"

# 4) –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
async def send_post(chat_id: int, context: ContextTypes.DEFAULT_TYPE, text: str, photo_url: str | None):
    if photo_url:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=photo_url,
            caption=text,
            reply_markup=POST_BUTTONS,
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=POST_BUTTONS,
        )

# 5) /start ‚Äî –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å 18+
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–î–∞", callback_data="age_yes"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="age_no"),
            ]
        ]
    )
    await update.effective_chat.send_message(AGE_QUESTION, reply_markup=kb)

# 6) –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_id = query.message.chat_id

    if data == "age_yes":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω 18+
        context.user_data["age_verified"] = True
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç
        await send_post(chat_id, context, POST1_TEXT, POST1_PHOTO_URL)
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        context.job_queue.run_once(
            callback=send_final_post_job,
            when=timedelta(minutes=5),
            chat_id=chat_id,
            name=f"final_post_{chat_id}",
        )

        # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        try:
            await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")
        except Exception:
            pass

    elif data == "age_no":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∑–∂–µ
        kb = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–î–∞, –º–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç", callback_data="age_confirm")]]
        )
        try:
            await query.edit_message_text(AGE_REQUIRED, reply_markup=kb)
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            await context.bot.send_message(chat_id=chat_id, text=AGE_REQUIRED, reply_markup=kb)

    elif data == "age_confirm":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª
        context.user_data["age_verified"] = True
        await send_post(chat_id, context, POST1_TEXT, POST1_PHOTO_URL)
        context.job_queue.run_once(
            callback=send_final_post_job,
            when=timedelta(minutes=5),
            chat_id=chat_id,
            name=f"final_post_{chat_id}",
        )
        try:
            await query.edit_message_text("–î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ")
        except Exception:
            pass

# 7) –î–∂–æ–±: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
async def send_final_post_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await send_post(chat_id, context, POST2_TEXT, POST2_PHOTO_URL)

# 8) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å 18+\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

def main():
    if not TOKEN:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CallbackQueryHandler(on_button))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (long polling)
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
